# BFS : Breadth-First-Search 너비 우선 탐색
# 그래프에서 시작 노드에 인접한 노드부터 탐색하는 알고리즘
# 그래프에서 모든 간선의 비용이 동일한 조건에서 최단 거리를 구한는 문제에 효과적
# 그래프 탐색: 하나의 노드에서 시작해서 다른 노드들을 방문하는 것
# 노드 인접: 두 노드가 간선으로 연결되어있는 상태
# 큐((Queue)): First-In-First-Out

# BFS에서 그래프와 큐를 사용
# 1. 탐색 시작 노드 정보를 큐에 삽입하고 방문처리 함
# 2. 큐에서 노드를 꺼내 방문하지 않은 인접 노드 정보를 모두 큐에 삽입하고 방문 처리함
# 3. 2번의 과정을 더 수행할 수 없을때까지 반복

graph = dict()
 
graph['A'] = ['B', 'C']
graph['B'] = ['A', 'D']
graph['C'] = ['A', 'G', 'H', 'I']
graph['D'] = ['B', 'E', 'F']
graph['E'] = ['D']
graph['F'] = ['D']
graph['G'] = ['C']
graph['H'] = ['C']
graph['I'] = ['C', 'J']
graph['J'] = ['I']